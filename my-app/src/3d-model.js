/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from "@react-three/fiber";
import {scaleAcceleration, spinning, rotationAcceleration} from './App.js';

export function Model(props) {
  const { nodes } = useGLTF('/3d-model.gltf')
  const meshRef = useRef();
  let scale = 1;
  let growing = false;
  let shrinking = false;
  let finished = false;

  let acceleration = 0.1;

  useFrame(() => {
    if (!meshRef.current) {
      return;
    }

    if (spinning === true && finished === false && shrinking === false) {
      acceleration += 0.03
    } else if (spinning === true && finished === false && shrinking === true) {
      acceleration -= 0.03
    }

    //if the scale is greater than 0.25 than the 3d object will shrink
    if (meshRef.current.scale.x >= 0.25 && shrinking === false && finished === false){
      meshRef.current.scale.x -= (acceleration * scaleAcceleration);
      meshRef.current.scale.y -= (acceleration * scaleAcceleration);
      meshRef.current.scale.z -= (acceleration * scaleAcceleration);
      meshRef.current.rotation.x += rotationAcceleration * acceleration * 1.2;
      meshRef.current.rotation.y += rotationAcceleration * acceleration * 1.9;
      if(meshRef.current.scale.x <= 0.25){
        shrinking = true;
      }
    } else if (meshRef.current.scale.x <= 1 && shrinking === true && finished === false) {
      meshRef.current.scale.x += (acceleration * scaleAcceleration * 1.8);
      meshRef.current.scale.y += (acceleration * scaleAcceleration * 1.8);
      meshRef.current.scale.z += (acceleration * scaleAcceleration * 1.8);
      meshRef.current.rotation.x += (rotationAcceleration * acceleration);
      meshRef.current.rotation.y += (rotationAcceleration * acceleration);
      if (meshRef.current.scale.x >= 1){
        growing = true;
      }
    } else if (meshRef.current.scale.x >= 1 && growing === true && finished === false){
      meshRef.current.scale.x = 1;
      meshRef.current.scale.y = 1;
      meshRef.current.scale.z = 1;
      acceleration = 0;
      finished = true;
    } else {
      if (window.innerWidth <= 720) {
        meshRef.current.rotation.x += 0.0028;
        meshRef.current.rotation.y += 0.0022;
      } else {
        meshRef.current.rotation.x += 0.0008;
        meshRef.current.rotation.y += 0.0002;
      }
    }

    

  });
  return (
    <group {...props} dispose={null}>
      <mesh scale={scale} ref={meshRef} geometry={nodes.mesh_0.geometry} castShadow>
      <meshBasicMaterial color="#33bbcf" shininess={0} opacity={0.2} transparent />
      </mesh>
    </group>
  )
}

useGLTF.preload('/3d-model.gltf')
